nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
class(features)
class(features[1])
features[] <- lapply(features, as.character)
features
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
features <- lapply(features, as.character)
features
features = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features = features$variable
features = lapply(features, as.character)
features
features
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features[] = lapply(features, as.character)
features
class(features)
features   = as.data.frame(features$variable)
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = as.data.frame(features$variable)
features
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
class(features)
class(features[1])
features[1]
features[] = lapply(features, as.character)
features
features[1]
features[1,1]
features[2,1]
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
features1<-names(train)[!(names(train) %in% c("Id","Date","Sales","logSales", "Customers"))]
features1
class(features1)
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features[] = lapply(features, as.character)
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features   = c(lapply(features, as.character))
features
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features[]   = c(lapply(features, as.character))
features
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = c(features$variable)
features
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features[]   = c(lapply(features, as.character))
features
class(features)
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features[]   = lapply(features, as.character)
features[2,1]
class(features)
features   = read.csv('./H2O_submits/h2o_GBM_20_03_800_top100_varimp.csv')
features   = features$variable
features   = as.character(features)
class(features)
features
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
feats_a = features[a]
feats_a
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
summary(gmbHex)
(varimps = data.frame(h2o.varimp(gmbHex)))
write.csv(varimps, "./H2O_submits/H2O_GBM_12_05_600_CV_varimp.csv",row.names=F)
h2o.saveModel(gmbHex, path = '/Users/jfdarre/Documents/NYCDS/Project4/H2O_models_GBM_12_05_600_CV', force = FALSE)
cat("Predicting Sales\n")
pred_CV <- as.data.frame(h2o.predict(gmbHex,testHex2))
pred_CV <- expm1(pred_CV[,1])
submit_CV <- data.frame(Id=test$Id, Sales=pred_CV)
cat("saving the submission file\n")
write.csv(submission2, "./H2O_submits/H2O_GBM_12_05_600_CV",row.names=F)
train_pred   <- as.data.frame(h2o.predict(gmbHex,trainHex))
train_pred   <- expm1(train_pred[,1])
train_pred   <- data.frame(Id=train$Id, Sales=train_pred)
write.csv(train_pred, "./H2O_submits/H2O_GBM_12_05_600_CV_train.csv",row.names=F)
valid_pred   <- as.data.frame(h2o.predict(gmbHex,validHex))
valid_pred   <- expm1(valid_pred[,1])
valid_pred   <- data.frame(Id=valid$Id, Sales=valid_pred)
write.csv(valid_pred, "./H2O_submits/H2O_GBM_12_05_600_CV_valid.csv",row.names=F)
####################################################################################
a = seq(1,100,4)
b = seq(2,100,4)
c = seq(3,100,4)
d = seq(4,100,4)
####################################################################################
feats_a = features[a]
gbmHex_a <- h2o.gbm(x               = feats_a,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
summary(gbmHex_a)
h2o.saveModel(gbmHex_a, path = '../H2O_models_GBM_15_05_400_CV_a', force = FALSE)
cat("Predicting Sales\n")
pred_a       <- as.data.frame(h2o.predict(gbmHex_a, testHex))
pred_a       <- expm1(pred_a[,1])
submit_a     <- data.frame(Id = test$Id, Sales = pred_a)
cat("saving the submission file\n")
write.csv(submit_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
train_pred_a   <- as.data.frame(h2o.predict(gbmHex_a, trainHex))
train_pred_a   <- expm1(train_pred_a[,1])
train_pred_a   <- data.frame(Id = train$Id, Sales = train_pred_a)
write.csv(train_pred_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
valid_pred_a   <- as.data.frame(h2o.predict(gbmHex_a, validHex))
valid_pred_a   <- expm1(valid_pred_a[,1])
valid_pred_a   <- data.frame(Id = valid$Id, Sales = valid_pred_a)
write.csv(valid_pred_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
####################################################################################
feats_b = features[b]
gbmHex_b <- h2o.gbm(x               = feats_b,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
summary(gbmHex)
(varimps = data.frame(h2o.varimp(gbmHex)))
write.csv(varimps, "./H2O_submits/H2O_GBM_12_05_600_CV_varimp.csv",row.names=F)
h2o.saveModel(gbmHex, path = '/Users/jfdarre/Documents/NYCDS/Project4/H2O_models_GBM_12_05_600_CV', force = FALSE)
cat("Predicting Sales\n")
pred_CV <- as.data.frame(h2o.predict(gbmHex,testHex2))
pred_CV <- expm1(pred_CV[,1])
submit_CV <- data.frame(Id=test$Id, Sales=pred_CV)
cat("saving the submission file\n")
write.csv(submission2, "./H2O_submits/H2O_GBM_12_05_600_CV",row.names=F)
train_pred   <- as.data.frame(h2o.predict(gbmHex,trainHex))
train_pred   <- expm1(train_pred[,1])
train_pred   <- data.frame(Id=train$Id, Sales=train_pred)
write.csv(train_pred, "./H2O_submits/H2O_GBM_12_05_600_CV_train.csv",row.names=F)
valid_pred   <- as.data.frame(h2o.predict(gbmHex,validHex))
valid_pred   <- expm1(valid_pred[,1])
valid_pred   <- data.frame(Id=valid$Id, Sales=valid_pred)
write.csv(valid_pred, "./H2O_submits/H2O_GBM_12_05_600_CV_valid.csv",row.names=F)
####################################################################################
a = seq(1,100,4)
b = seq(2,100,4)
c = seq(3,100,4)
d = seq(4,100,4)
####################################################################################
feats_a = features[a]
gbmHex_a <- h2o.gbm(x               = feats_a,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
summary(gbmHex_a)
h2o.saveModel(gbmHex_a, path = '../H2O_models_GBM_15_05_400_CV_a', force = FALSE)
cat("Predicting Sales\n")
pred_a       <- as.data.frame(h2o.predict(gbmHex_a, testHex))
pred_a       <- expm1(pred_a[,1])
submit_a     <- data.frame(Id = test$Id, Sales = pred_a)
cat("saving the submission file\n")
write.csv(submit_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
train_pred_a   <- as.data.frame(h2o.predict(gbmHex_a, trainHex))
train_pred_a   <- expm1(train_pred_a[,1])
train_pred_a   <- data.frame(Id = train$Id, Sales = train_pred_a)
write.csv(train_pred_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
valid_pred_a   <- as.data.frame(h2o.predict(gbmHex_a, validHex))
valid_pred_a   <- expm1(valid_pred_a[,1])
valid_pred_a   <- data.frame(Id = valid$Id, Sales = valid_pred_a)
write.csv(valid_pred_a, "./H2O_submits/H2O_models_GBM_15_05_400_CV_a.csv",row.names=F)
####################################################################################
feats_b = features[b]
gbmHex_b <- h2o.gbm(x               = feats_b,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
summary(gbmHex_b)
h2o.saveModel(gbmHex_b, path = '../H2O_models_GBM_15_05_400_CV_b', force = FALSE)
cat("Predicting Sales\n")
pred_b       <- as.data.frame(h2o.predict(gbmHex_b, testHex))
pred_b       <- expm1(pred_b[,1])
submit_b     <- data.frame(Id = test$Id, Sales = pred_b)
cat("saving the submission file\n")
write.csv(submit_b, "./H2O_submits/H2O_models_GBM_15_05_400_CV_b.csv",row.names=F)
train_pred_b   <- as.data.frame(h2o.predict(gbmHex_b, trainHex))
train_pred_b   <- expm1(train_pred_b[,1])
train_pred_b   <- data.frame(Id = train$Id, Sales = train_pred_b)
write.csv(train_pred_b, "./H2O_submits/H2O_models_GBM_15_05_400_CV_b.csv",row.names=F)
valid_pred_b   <- as.data.frame(h2o.predict(gbmHex_b, validHex))
valid_pred_b   <- expm1(valid_pred_b[,1])
valid_pred_b   <- data.frame(Id = valid$Id, Sales = valid_pred_b)
write.csv(valid_pred_b, "./H2O_submits/H2O_models_GBM_15_05_400_CV_b.csv",row.names=F)
####################################################################################
feats_c = features[c]
gbmHex_c <- h2o.gbm(x               = feats_c,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
summary(gbmHex_c)
h2o.saveModel(gbmHex_c, path = '../H2O_models_GBM_15_05_400_CV_c', force = FALSE)
cat("Predicting Sales\n")
pred_c       <- as.data.frame(h2o.predict(gbmHex_c, testHex))
pred_c       <- expm1(pred_c[,1])
submit_c     <- data.frame(Id = test$Id, Sales = pred_c)
cat("saving the submission file\n")
write.csv(submit_c, "./H2O_submits/H2O_models_GBM_15_05_400_CV_c.csv",row.names=F)
train_pred_c   <- as.data.frame(h2o.predict(gbmHex_c, trainHex))
train_pred_c   <- expm1(train_pred_c[,1])
train_pred_c   <- data.frame(Id = train$Id, Sales = train_pred_c)
write.csv(train_pred_c, "./H2O_submits/H2O_models_GBM_15_05_400_CV_c.csv",row.names=F)
valid_pred_c   <- as.data.frame(h2o.predict(gbmHex_c, validHex))
valid_pred_c   <- expm1(valid_pred_c[,1])
valid_pred_c   <- data.frame(Id = valid$Id, Sales = valid_pred_c)
write.csv(valid_pred_c, "./H2O_submits/H2O_models_GBM_15_05_400_CV_c.csv",row.names=F)
####################################################################################
feats_d = features[d]
gbmHex_d <- h2o.gbm(x               = feats_d,
y               = "logSales",
training_frame  = trainHex,
model_id        = "introGBM",
nbins_cats      = 1115,
sample_rate     = 0.5,
col_sample_rate = 0.5,
max_depth       = 15,
learn_rate      = 0.05,
seed            = 12345678,
ntrees          = 400,
validation_frame = validHex)
summary(gbmHex_d)
h2o.saveModel(gbmHex_d, path = '../H2O_models_GBM_15_05_400_CV_d', force = FALSE)
cat("Predicting Sales\n")
pred_d       <- as.data.frame(h2o.predict(gbmHex_d, testHex))
pred_d       <- expm1(pred_d[,1])
submit_d     <- data.frame(Id = test$Id, Sales = pred_d)
cat("saving the submission file\n")
write.csv(submit_d, "./H2O_submits/H2O_models_GBM_15_05_400_CV_d.csv",row.names=F)
train_pred_d   <- as.data.frame(h2o.predict(gbmHex_d, trainHex))
train_pred_d   <- expm1(train_pred_d[,1])
train_pred_d   <- data.frame(Id = train$Id, Sales = train_pred_d)
write.csv(train_pred_d, "./H2O_submits/H2O_models_GBM_15_05_400_CV_d.csv",row.names=F)
valid_pred_d   <- as.data.frame(h2o.predict(gbmHex_d, validHex))
valid_pred_d   <- expm1(valid_pred_d[,1])
valid_pred_d   <- data.frame(Id = valid$Id, Sales = valid_pred_d)
write.csv(valid_pred_d, "./H2O_submits/H2O_models_GBM_15_05_400_CV_d.csv",row.names=F)
####################################################################################
cat("Predicting Sales\n")
pred_CV <- as.data.frame(h2o.predict(gbmHex,testHex))
pred_CV <- expm1(pred_CV[,1])
submit_CV <- data.frame(Id=test$Id, Sales=pred_CV)
cat("saving the submission file\n")
write.csv(submission2, "./H2O_submits/H2O_GBM_12_05_600_CV",row.names=F)
write.csv(submit_CV, "./H2O_submits/H2O_GBM_12_05_600_CV",row.names=F)
mean(pred_CV)
mean(pred_d)
mean(pred_a)
mean(pred_b)
mean(pred_c)
mean(pred_d)
gbmHex <- h2o.gbm(  x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.5,
seed = 12345678,
ntrees = 600,
validation_frame = validHex)
summary(gbmHex)
(varimps = data.frame(h2o.varimp(gbmHex)))
write.csv(varimps, "./H2O_submits/H2O_GBM_12_05_600_CV_varimp.csv",row.names=F)
h2o.saveModel(gbmHex, path = '/Users/jfdarre/Documents/NYCDS/Project4/H2O_models_GBM_12_05_600_CV', force = FALSE)
cat("Predicting Sales\n")
pred_CV <- as.data.frame(h2o.predict(gbmHex,testHex))
pred_CV <- expm1(pred_CV[,1])
submit_CV <- data.frame(Id=test$Id, Sales=pred_CV)
cat("saving the submission file\n")
write.csv(submit_CV, "./H2O_submits/H2O_GBM_12_05_600_CV",row.names=F)
sqrt(sum(rmse(train_pred, train$Sales))/nrow(train))
train_pred
sqrt(sum(rmse(train_pred$Sales, train$Sales))/nrow(train))
sqrt(sum(rmse(train_pred_a$Sales, train$Sales))/nrow(train))
sqrt(sum(rmse(train_pred_b$Sales, train$Sales))/nrow(train))
sqrt(sum(rmse(train_pred_c$Sales, train$Sales))/nrow(train))
sqrt(sum(rmse(train_pred_d$Sales, train$Sales))/nrow(train))
sqrt(sum(rmse(valid_pred$Sales, valid$Sales))/nrow(valid))
sqrt(sum(rmse(valid_pred_a$Sales, valid$Sales))/nrow(valid))
sqrt(sum(rmse(valid_pred_b$Sales, valid$Sales))/nrow(valid))
sqrt(sum(rmse(valid_pred_c$Sales, valid$Sales))/nrow(valid))
sqrt(sum(rmse(valid_pred_d$Sales, valid$Sales))/nrow(valid))
summary(gbmHex_c)
valid_pred_d   <- as.data.frame(h2o.predict(gbmHex_d, validHex))
valid_pred_d
trainHex
validHex
validHex <- as.h2o(valid,destination_frame = "validHex")
validHex
valid
train
valid = train[year == 15 & month >= 6,]
valid = train[year == 15 & month = 6,]
valid = train[year == 15 & month == 6,]
valid
cat("reading the train and test data (with data.table) \n")
train <- fread("../data/train3.csv",stringsAsFactors = T)
test  <- fread("../data/test3.csv",stringsAsFactors = T)
store <- fread("./input/store.csv",stringsAsFactors = T)
train <- train[Sales > 0,]  ## We are not judged on 0 sales records in test set
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
## more care should be taken to ensure the dates of test can be projected from train
## decision trees do not project well, so you will want to have some strategy here, if using the dates
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
# competition feature
train$Competition <- (sqrt(max(train$CompetitionDistance, na.rm = TRUE)-train$CompetitionDistance))*
(((train$year - train$CompetitionOpenSinceYear) * 12) - (train$CompetitionOpenSinceMonth-train$month))
test$Competition <- (sqrt(max(test$CompetitionDistance, na.rm = TRUE)-test$CompetitionDistance))*
(((test$year - test$CompetitionOpenSinceYear) * 12) - (test$CompetitionOpenSinceMonth-test$month))
## log transformation to not be as sensitive to high sales
## decent rule of thumb:
##     if the data spans an order of magnitude, consider a log transform
train[,logSales:=log1p(Sales)]
valid = train[year == 15 & month == 6,]
train = train[year <15 | month <6,]
valid
unique(train$year)
unique(train$month)
cat("reading the train and test data (with data.table) \n")
train0 <- fread("../data/train3.csv",stringsAsFactors = T)
test  <- fread("../data/test3.csv",stringsAsFactors = T)
store <- fread("./input/store.csv",stringsAsFactors = T)
train0 <- train0[Sales > 0,]  ## We are not judged on 0 sales records in test set
train0 <- merge(train0,store,by="Store")
test <- merge(test,store,by="Store")
## more care should be taken to ensure the dates of test can be projected from train
## decision trees do not project well, so you will want to have some strategy here, if using the dates
train0[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
# competition feature
train0$Competition <- (sqrt(max(train0$CompetitionDistance, na.rm = TRUE)-train0$CompetitionDistance))*
(((train0$year - train0$CompetitionOpenSinceYear) * 12) - (train0$CompetitionOpenSinceMonth-train0$month))
test$Competition <- (sqrt(max(test$CompetitionDistance, na.rm = TRUE)-test$CompetitionDistance))*
(((test$year - test$CompetitionOpenSinceYear) * 12) - (test$CompetitionOpenSinceMonth-test$month))
## log transformation to not be as sensitive to high sales
## decent rule of thumb:
##     if the data spans an order of magnitude, consider a log transform
train0[,logSales:=log1p(Sales)]
valid = train0[year == 15 & month == 6,]
train = train0[year <15 | month <6,]
unique(train$year)
unique(train$month)
valid
valid = train0[((year == 15) & (month == 6)),]
valid
valid = train0[((year == 15) & (month == 6)),]
train = train0[((year <  15) | (month <  6)),]
unique(train$year)
unique(train$month)
unique(train0$year)
unique(train0$month)
valid = filter(train0, year == 15 , month == 6)
valid
group_by(train0, year, month)
group_by(train0, c(year, month), mean())
?group_by
group_by(train0, year, month)%>%summarise(.,mean(Sales))
print(group_by(train0, year, month)%>%summarise(.,mean(Sales)))
print(group_by(train0, year, month)%>%summarise(.,mean(Sales)),48)
group_by(train0, year, month)%>%summarise(.,mean(Sales))%>% tbl_df %>% print(n=40)
filter(train0, year == 15)
train0[year == 15,]
train0['year' == 15,]
train0[train0$year == 15,]
train0$year
train0[train0$year == 2015,]
valid = filter(train0, year == 2015 , month == 6)
valid
train = train0[((year <  2015) | (month <  6)),]
unique(train$year)
unique(train$month)
valid = filter(train0, year == 2015 , month > 6)
train = train0[((year <  2015) | (month <  6)),]
valid = train0[year == 2015 , month > 6,]
valid = train0[year == 2015 & month >= 6,]
train = train0[year <  2015 | month <  6,]
unique(train$year)
unique(train$month)
nrow(valid)
nrow(train)
nrow(train0)
nrow(valid) + nrow(train)
for (j in c("Store", "DayOfWeek", "Promo",
"year", "month", "day", "PromoFirstDate",
#            "day_of_year", "week_of_year", "DayBeforeClosed", "DayAfterClosed",
"State", "PromoSecondDate",
"CompetitionOpenSinceMonth", "CompetitionOpenSinceYear",
"Promo2", "Promo2SinceWeek", "Promo2SinceYear")) {
train[[j]] <- as.factor(train[[j]])
valid[[j]] <- as.factor(valid[[j]])
test[[j]]  <- as.factor(test[[j]])
}
