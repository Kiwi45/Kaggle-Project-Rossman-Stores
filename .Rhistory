}
max_weight = 3
for (i in 0:0) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
#         pred = (i*train_pred +
#                 j*train_pred_a +
#                 k*train_pred_b +
#                 l*train_pred_c +
#                 (max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l)#, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0)#, rmse=0)
max_weight = 3
for (i in 0:0) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
#         pred = (i*train_pred +
#                 j*train_pred_a +
#                 k*train_pred_b +
#                 l*train_pred_c +
#                 (max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l)#, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0)#, rmse=0)
max_weight = 3
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
#         pred = (i*train_pred +
#                 j*train_pred_a +
#                 k*train_pred_b +
#                 l*train_pred_c +
#                 (max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l)#, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0)#, rmse=0)
max_weight = 5
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
#         pred = (i*train_pred +
#                 j*train_pred_a +
#                 k*train_pred_b +
#                 l*train_pred_c +
#                 (max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l)#, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0, rmse=0)
max_weight = 1
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
pred = (i*train_pred +
j*train_pred_a +
k*train_pred_b +
l*train_pred_c +
(max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0, rmse=0)
i=0
j=0
k=0
l=0
pred = (i*train_pred +
j*train_pred_a +
k*train_pred_b +
l*train_pred_c +
(max_weight-i-j-k-l)*train_pred_d)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
temp
rmse(pred, train$Sales)
pred
train_pred_a
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=rmse(pred, train$Sales))
grid_search = rbind(grid_search, temp)
grid_search
pred
rmse(pred, train$Sales)
nrow(train_pred_d)
nrow(train$Sales)
train
train$Sales
nrow(train$Sales)
length(train$Sales)
nrow(train_pred_d)
(train_pred_d-train$Sales)
head((train_pred_d-train$Sales))
head((train_pred_d$Sales-train$Sales))
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
pred
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=rmse(pred, train$Sales))
temp
rmse(pred, train$Sales)
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
temp
max_weight = 1
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
train_pred_d$Sales
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0, rmse=0)
max_weight = 1
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
print(temp)
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search = data.frame(main=0, a=0, b=0, c=0, d=0, rmse=0)
max_weight = 5
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
print(temp)
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search[1:,]
grid_search[1:]
grid_search[1]
grid_search[1,]
grid_search[2:,]
grid_search[-1,]
grid_search = data.frame()
max_weight = 5
for (i in 0:max_weight) {
print(paste0('i',i))
for (j in 0:(max_weight-i)) {
print(paste0('j',j))
for (k in 0:(max_weight-i-j)) {
print(paste0('k',k))
for (l in 0:(max_weight-i-j-k)) {
print(paste0('l',l))
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
print(temp)
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search
grid_search[,5]
grid_search[,6]
filter(grid_search, rmse == min(grid_search[,6]))
grid_search = data.frame()
max_weight = 10
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = (i*train_pred$Sales +
j*train_pred_a$Sales +
k*train_pred_b$Sales +
l*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
filter(grid_search, rmse == min(grid_search[,6]))
grid_search[order(rmse)]
grid_search[order(rmse),]
grid_search
grid_search[with(grid_search, order(rmse),]
grid_search[with(grid_search, order(rmse)),]
head(grid_search[with(grid_search, order(rmse)),])
head(grid_search[with(grid_search, order(rmse)),],20)
max_weight
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame()
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=i, a=j, b=k, c=l, d=max_weight-i-j-k-l, rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame()
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=(i-max_weight/2),
a=(j-max_weight/2),
b=(k-max_weight/2),
c=(j-max_weight/2),
d=max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(3*max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=(i-max_weight/2),
a=(j-max_weight/2),
b=(k-max_weight/2),
c=(j-max_weight/2),
d=max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search = data.frame()
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(3*max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=(i-max_weight/2),
a=(j-max_weight/2),
b=(k-max_weight/2),
c=(j-max_weight/2),
d=max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame()
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred$Sales +
(j-max_weight/2)*train_pred_a$Sales +
(k-max_weight/2)*train_pred_b$Sales +
(l-max_weight/2)*train_pred_c$Sales +
(3*max_weight-i-j-k-l)*train_pred_d$Sales)/max_weight
temp = data.frame(main=(i-max_weight/2),
a=(j-max_weight/2),
b=(k-max_weight/2),
c=(j-max_weight/2),
d=3*max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame()
max_weight = 2
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred_a$Sales +
(j-max_weight/2)*train_pred_b$Sales +
(k-max_weight/2)*train_pred_c$Sales +
(l-max_weight/2)*train_pred_d$Sales +
(3*max_weight-i-j-k-l)*train_pred$Sales)/max_weight
temp = data.frame(   a=(i-max_weight/2),
b=(j-max_weight/2),
c=(k-max_weight/2),
d=(j-max_weight/2),
main=3*max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
grid_search = data.frame()
max_weight = 10
for (i in 0:max_weight) {
for (j in 0:(max_weight-i)) {
for (k in 0:(max_weight-i-j)) {
for (l in 0:(max_weight-i-j-k)) {
pred = ((i-max_weight/2)*train_pred_a$Sales +
(j-max_weight/2)*train_pred_b$Sales +
(k-max_weight/2)*train_pred_c$Sales +
(l-max_weight/2)*train_pred_d$Sales +
(3*max_weight-i-j-k-l)*train_pred$Sales)/max_weight
temp = data.frame(   a=(i-max_weight/2),
b=(j-max_weight/2),
c=(k-max_weight/2),
d=(j-max_weight/2),
main=3*max_weight-i-j-k-l,
rmse=sqrt(sum(rmse(pred, train$Sales))/nrow(train)))
grid_search = rbind(grid_search, temp)
}
}
}
}
grid_search
filter(grid_search, rmse == min(grid_search[,6]))
head(grid_search[with(grid_search, order(rmse)),],20)
mean(train_pred$Sales)
mean(train_pred_a$Sales)
mean(train_pred_b$Sales)
mean(train_pred_c$Sales)
mean(train_pred_d$Sales)
pred_ensemb  <- (20*train_pred - 4*train_pred_a - 2*train_pred_b - train_pred_c - 2*train_pred_d)/10
mean(pred_ensemb)
pred_ensemb  <- (20*train_pred$Sales - 4*train_pred_a$Sales - 2*train_pred_b$Sales
- train_pred_c$Sales - 2*train_pred_d$Sales)/10
mean(pred_ensemb)
pred_ensemb  <- (20*train_pred$Sales - 4*train_pred_a$Sales - 2*train_pred_b$Sales
- 2*train_pred_c$Sales - 2*train_pred_d$Sales)/10
mean(pred_ensemb)
submit_d     <- data.frame(Id = test$Id, Sales = pred_ensemb)
pred_ensemb
submit_d     <- data.frame(Id = test$Id, Sales = pred_ensemb)
pred_d
pred_ensemb  <- (20*pred2 - 4*pred_a - 2*pred_b - 2*pred_c - 2*pred_d)/10
mean(pred_ensemb)
submit_d     <- data.frame(Id = test$Id, Sales = pred_ensemb)
write.csv(submit_d, "./H2O_submits/h2o_GBM_ensemble_v1.csv",row.names=F)
features3 = varimps$variable[1:80]
gbmHex3 <- h2o.gbm( x=features3,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 12,
learn_rate=0.05,
seed = 12345678,
ntrees = 800)
summary(gbmHex3)
(varimps3 = data.frame(h2o.varimp(gbmHex3)))
sumup(model = gbmHex3, trainHex = trainHex, train = train)
gbm_12_05_800_top80 = gbmHex3
h2o.saveModel(gbm_12_05_800_top80,
path = '/Users/jfdarre/Documents/NYCDS/Project4/H2O_models_GBM_12_05_800_top80', force = FALSE)
cat("Predicting Sales\n")
testHex3     <- as.h2o(test)
predictions3 <- as.data.frame(h2o.predict(gbmHex3,testHex3))
pred3        <- expm1(predictions3[,1])
summary(pred3)
submission3  <- data.frame(Id=test$Id, Sales=pred3)
cat("saving the submission file\n")
write.csv(submission3, "./H2O_submits/h2o_GBM_12_05_800_top80_v2.csv",row.names=F)
train_pred3   <- as.data.frame(h2o.predict(gbmHex3,trainHex))
train_pred3   <- expm1(train_pred3[,1])
train_pred3   <- data.frame(Id=train$Id, Sales=train_pred3)
write.csv(train_pred3, "./H2O_submits/h2o_GBM_12_05_800_top80_train_v2.csv",row.names=F)
write.csv(varimps3, "./H2O_submits/h2o_GBM_12_05_800_top80_varimp_2.csv",row.names=F)
pred_ensemb2  <- (2*pred2 + pred_a + pred_b + pred_c + pred_d + 6*pred3)/12
mean(pred_ensemb)
mean(pred_ensemb2)
submit_ensemb2 <- data.frame(Id = test$Id, Sales = pred_ensemb2)
cat("saving the submission file\n")
write.csv(submit_d, "./H2O_submits/h2o_GBM_ensemble_v2.csv",row.names=F)
