a = c("id","member_id","loan_amnt","funded_amnt","funded_amnt_inv","term","int_rate","installment","grade","sub_grade","emp_title","emp_length","home_ownership","annual_inc","verification_status","issue_d","loan_status","pymnt_plan","url","desc","purpose","title","zip_code","addr_state","dti","delinq_2yrs","earliest_cr_line","fico_range_low","fico_range_high","inq_last_6mths","mths_since_last_delinq","mths_since_last_record","open_acc","pub_rec","revol_bal","revol_util","total_acc","initial_list_status","out_prncp","out_prncp_inv","total_pymnt","total_pymnt_inv","total_rec_prncp","total_rec_int","total_rec_late_fee","recoveries","collection_recovery_fee","last_pymnt_d","last_pymnt_amnt","next_pymnt_d","last_credit_pull_d","last_fico_range_high","last_fico_range_low","collections_12_mths_ex_med","mths_since_last_major_derog","policy_code")
install.packages('utils')
install.packages("utils")
library("base64enc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:base64enc", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages('utils')
pb <- winProgressBar(title="Example progress bar", label="0% done", min=1, max=length(range), initial=1)
?winProgressBar
??winProgressBar
?winProgressBar
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?winProgressBar
detach("package:utils", unload=TRUE)
detach("package:methods", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?withProgress
devtools::install_github("rstudio/shiny-incubator")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::install_github("rstudio/shiny-incubator")
library("shinyIncubator", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:shinyIncubator", unload=TRUE)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?withProgress
?updateNumericInput
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
detail = paste0("Running period: ",i)
detail = paste0("Running period: ", i)
i = i + 1
incProgress(i/length(range))
detail = paste0("Running period: ", i)
i = 0
paste0("Running period: ", i)
shiny::runApp('Documents/NYCDS/Project2')
incProgress(i/length(range)/2, detail = paste0("Running period: ", i))
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
install.packages('shinythemes')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?shinytheme
?navbarPage
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?shinythemes
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
runApp(
# A very basic navbar page with different themes
shinyApp(
ui = navbarPage("Default theme",
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("United",
theme = shinytheme("united"),
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
shinyApp(
ui = navbarPage("Cerulean",
theme = shinytheme("cerulean"),
tabPanel("Plot", "Plot tab contents..."),
navbarMenu("More",
tabPanel("Summary", "Summary tab contents..."),
tabPanel("Table", "Table tab contents...")
)
),
server = function(input, output) { }
)
runApp(
# A more complicated app with the flatly theme
shinyApp(
ui = fluidPage(
theme = shinytheme("flatly"),
titlePanel("Tabsets"),
sidebarLayout(
sidebarPanel(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
br(),
sliderInput("n", "Number of observations:",
value = 500, min = 1, max = 1000)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
),
server = function(input, output) {
data <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(data(), main=paste('r', dist, '(', n, ')', sep=''))
})
output$summary <- renderPrint({
summary(data())
})
output$table <- renderTable({
data.frame(x=data())
})
}
)
)
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?navbarPage
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?actionButton
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?selectInput
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
?wellPanel
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/Project2')
shiny::runApp('Documents/NYCDS/bootcamp003_student/Project2-Shiny/JF')
shiny::runApp('Documents/NYCDS/bootcamp003_student/Project2-Shiny/JF')
setwd("~/Documents/NYCDS/Project4/KaggleProject")
library(caret)
install.packages('caret')
library(caret)
library(plyr)
library(data.table)
library(h2o)
cat("reading the train and test data (with data.table) \n")
train <- fread("../../KaggleProject/data/train_states_R_v8.csv",stringsAsFactors = T)
train <- fread("../data/train2.csv",stringsAsFactors = T)
train <- fread("../data/train.csv",stringsAsFactors = T)
test  <- fread("../data/test.csv",stringsAsFactors = T)
store <- fread("./input/store.csv",stringsAsFactors = T)
train <- train[Sales > 0,]  ## We are not judged on 0 sales records in test set
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
train$Competition <- (sqrt(max(train$CompetitionDistance, na.rm = TRUE)-train$CompetitionDistance))*
(((train$year - train$CompetitionOpenSinceYear) * 12) - (train$CompetitionOpenSinceMonth-train$month))
test$Competition <- (sqrt(max(test$CompetitionDistance, na.rm = TRUE)-test$CompetitionDistance))*
(((test$year - test$CompetitionOpenSinceYear) * 12) - (test$CompetitionOpenSinceMonth-test$month))
train[,logSales:=log1p(Sales)]
h2o.init(nthreads=-1,max_mem_size='5G', assertion = FALSE)
trainHex<-as.h2o(train)
features<-names(train)[!(names(train) %in% c("Id","Date","Sales","logSales", "Customers"))]
features
gbmHex <- h2o.gbm(x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 15,
learn_rate=0.05,
seed = 12345678, #Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded
ntrees = 2)
summary(gbmHex)
(varimps = data.frame(h2o.varimp(gbmHex)))
rmse = function(predictions, targets) {
return(((predictions - targets)/targets) ** 2)
}
train_pred = as.data.frame(h2o.predict(rfHex,trainHex))
train_pred <- expm1(train_pred[,1])
train_pred = train_pred
train$pred = train_pred
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
train_pred = as.data.frame(h2o.predict(gbmHex,trainHex))
train_pred <- expm1(train_pred[,1])
train_pred = train_pred
train$pred = train_pred
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
str(train)
train$logSales
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
library(dplyr)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
gbmHex <- h2o.gbm(x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 15,
learn_rate=0.05,
seed = 12345678, #Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded
ntrees = 50)
summary(gbmHex)
(varimps = data.frame(h2o.varimp(gbmHex)))
train_pred = as.data.frame(h2o.predict(gbmHex,trainHex))
train_pred <- expm1(train_pred[,1])
train_pred = train_pred
train$pred = train_pred
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
features
varimps[190:]
varimps[190:,]
varimps[190:,]
varimps[190:203,]
varimps$variable
varimps$variable[1:100]
features = varimps$variable[1:100]
gbmHex <- h2o.gbm(x=features,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 15,
learn_rate=0.05,
seed = 12345678, #Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded
ntrees = 50)
summary(gbmHex)
(varimps = data.frame(h2o.varimp(gbmHex)))
train_pred = as.data.frame(h2o.predict(gbmHex,trainHex))
train_pred <- expm1(train_pred[,1])
train_pred = train_pred
train$pred = train_pred
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
for (j in c("Store", "DayOfWeek", "Promo",
"year", "month",
#            "day", "day_of_year", "week_of_year", "PromoFirstDate",
#            "State", "PromoSecondDate", "DayBeforeClosed", "DayAfterClosed",
"CompetitionOpenSinceMonth", "CompetitionOpenSinceYear",
"Promo2", "Promo2SinceWeek", "Promo2SinceYear"
)) {
train[[j]] <- as.factor(train[[j]])
test[[j]]  <- as.factor(test[[j]])
}
temp = c(features, "Store", "DayOfWeek", "Promo", "year", "month", "CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear", "Promo2", "Promo2SinceWeek", "Promo2SinceYear")
temp
unique(temp)
temp
unique(temp)
temp == 'Store'
varimps
temp = c(varimps$variable[1:80], "Store", "DayOfWeek", "Promo", "year", "month", "CompetitionOpenSinceMonth",
features = unique(temp)
features
features = unique(temp)
temp = c(varimps$variable[1:80], "Store", "DayOfWeek", "Promo", "year", "month", "CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear", "Promo2", "Promo2SinceWeek", "Promo2SinceYear")
features = unique(temp)
features
features3
temp = c(varimps2$variable[1:80], "Store", "DayOfWeek", "Promo", "year", "month", "CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear", "Promo2", "Promo2SinceWeek", "Promo2SinceYear")
features3 = unique(temp)
gbmHex3 <- h2o.gbm( x=features3,
y="logSales",
training_frame=trainHex,
model_id="introGBM",
nbins_cats=1115,
sample_rate = 0.5,
col_sample_rate = 0.5,
max_depth = 20,
learn_rate=0.1,
seed = 12345678, #Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded
ntrees = 50)
summary(gbmHex3)
(varimps3 = data.frame(h2o.varimp(gbmHex3)))
train_pred = as.data.frame(h2o.predict(gbmHex,trainHex))
train_pred <- expm1(train_pred[,1])
train_pred = train_pred
train$pred = train_pred
train$rmse = rmse(train_pred, train$Sales)
train2 = filter(train, month %in% c(8,9))
(total_rmse = sqrt(sum(train$rmse)/nrow(train)))
(partial_rmse = sqrt(sum(train2$rmse)/nrow(train2)))
sumup = as.data.frame(rbind(summary(train_pred), summary(train$Sales), summary(train2$pred), summary(train2$Sales)))
sumup$sd = c(round(sd(train_pred)), round(sd(train$Sales)), round(sd(train2$pred)), round(sd(train2$Sales)))
sumup
testHex<-as.h2o(test)
predictions<-as.data.frame(h2o.predict(gbmHex,testHex))
predictions<-as.data.frame(h2o.predict(gbmHex3,testHex))
test  <- fread("../data/test.csv",stringsAsFactors = T)
test <- merge(test,store,by="Store")
test[,Date:=as.Date(Date)]
test$Competition <- (sqrt(max(test$CompetitionDistance, na.rm = TRUE)-test$CompetitionDistance))*
(((test$year - test$CompetitionOpenSinceYear) * 12) - (test$CompetitionOpenSinceMonth-test$month))
predictions<-as.data.frame(h2o.predict(gbmHex3,testHex))
testHex<-as.h2o(test)
predictions<-as.data.frame(h2o.predict(gbmHex3,testHex))
pred <- expm1(predictions[,1])
summary(pred)
submission <- data.frame(Id=test$Id, Sales=pred)
cat("saving the submission file\n")
write.csv(submission, "./H2O_submits/h2o_GBM_20_10_50.csv",row.names=F)
